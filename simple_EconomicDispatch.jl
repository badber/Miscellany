# Author: Luis Badesa
#
# This code is a simple example of an Economic Dispatch optimization,
# intended to teach how to create a simple optimization problem in JuMP.

##############

## Install JuMP 
# (UNCOMMENT the next block of code if JuMP is not installed)
#= 
    import Pkg
    Pkg.add("JuMP") 
=# 
using JuMP

## Choose an optimization solver 
# (UNCOMMENT the next block of code if the Julia package for the solver is not installed)
#= 
    Pkg.add("HiGHS") 
=# 
using HiGHS

##############

## Input Data
cost = [5, 10, 15] # €/MWh
Pₘₐₓ = [20, 20, 20] # Rated power of each generator, MW
Demand = 50 # MW

N = length(cost) # Number of generators

##############

## Create the model for the optimization
model = Model(HiGHS.Optimizer) 

# Define Decision Variables for power generated by each unit:
@variable(model, 0 <= P[n in 1:N] <= Pₘₐₓ[n]) # MW

# Define the constraints:
@constraint(model, power_balance, sum(P) == Demand)  # Total power output equals demand

# Define the objective function 
Total_cost = cost' * P

@objective(model, Min, Total_cost)

print(model)
println()

##############

## Solve the optimization problem
optimize!(model)

##############

## Get the solution
println()
println("##########################################")
println()
println("SOLUTION:")
println()

println("Total cost: ", value(Total_cost), " €")
println()

println("Power output:")
for i in 1:3
    println("  - Generator $i: ", value(P[i]), " MW")
end
println()

λₑₙₑᵣ = dual(power_balance) # Marginal price of energy, €/MWh
println("Price of energy: ", λₑₙₑᵣ, " €/MWh")
